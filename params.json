{"tagline":"Calendar module for Titanium","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"AGCalendar Module <img src=\"http://f.cl.ly/items/422Q2T3G043h0O171E1z/acgLogo.png\" height=\"35\" valign=\"bottom\" />\r\n============\r\n## Description\r\nAGCalendar enables you to access the native calendar on your iPhone, iPad or iPod. EventKit and Core Data are both supported data sources. This enables you to switch between iCal and your custom calendar. Some more information below.\r\n\r\n* **EventKit**: All events including the events in your native calendar will be shown. Events added will also be added to your native iCal.\r\n* **CoreData**: Uses Core Data to store your calendar-events. Only events added by your application will be shown. Added events will not be added to iCal. This also allows you to add more details to your events. \r\n\r\n> <img src=\"http://f.cl.ly/items/1h3O0S3p2T0f1K2G2h1w/info1.png\" height=\"228\" style=\"margin-right:20px;\" />\r\n\r\n\r\nAccessing the Calendar Module\r\n--------------------------\r\n\r\nTo access this module from JavaScript, you would do the following:\r\n\r\n>     Titanium.Calendar = Ti.Calendar = require(\"ag.calendar\");\r\n\r\nFunctions\r\n--------\r\n## `Ti.Calendar.dataSource(ids[string])`\r\nThis will set the data source you want to use.    \r\nIf this is not set, the calendar will default to EventKit as your data source.     \r\n\r\nPlease read the  *description* above for more information.\r\n\r\n### Argument\r\n* [string] **dataSource**: *eventkit* or *coredata* (Default: eventkit)\r\n\r\n### Example\r\n>     Ti.Calendar.dataSource(\"coredata\");\r\n\r\n## `Ti.Calendar.createView(object)`\r\nThis will create a calendarView with controls to move back an forth between months.\r\n\r\n### Arguments\r\n* [boolean] **editable**: Turns \"swipe-to-delete\" on or off. Defaults to  *false*\r\n* [string] **color**: This is required by Titanium for some reason. Just set it to \"*white*\"\r\n\r\n### Example\r\n>     var calendarView = Ti.Calendar.createView({\r\n\t\ttop: 0,\r\n\t\teditable: true,\r\n\t\tcolor: \"white\"\r\n\t});\r\n\r\n\r\n\r\n## `Ti.Calendar.addEvent(object)`\r\nThis will add an event to your calendar object.\r\n### Parameters\r\n* **EventKit**   \r\n\r\n * [string] **title**: Event title\r\n * [string] **location**: Events location.\r\n * [string] **note**: Event notes.\r\n * [date] **startDate**: Events start. (Javascript date object)\r\n * [date] **endDate**: Events end. (Javascript date object) \r\n * [object] **recurrence**: Recurrence rule (**EventKit only**)\r\n * [object] **alarm**: Event alarm (**EventKit only**)\r\n\r\n* **Core Data** (Including the above)      \r\n\r\n * [string] **type**: Event type. E.g: *public* or *private*\r\n * [string] **attendees**: Comma-separated list of attendees\r\n * [string] **identifier**: Event identifier.\r\n * [string] **organizer**: Name of the organizer\r\n\r\n### Example\r\n>     var endDate = new Date();\r\n\tendDate.setHours(endDate.getHours()+3); // Set event to last 3 hours.\r\n\r\n>     // Date to end our recurring event\r\n\tvar recurringEnd = new Date();\r\n\trecurringEnd.setMonth(recurringEnd.getMonth()+6); // Recurring ends in 6 months\r\n\r\n>     calendar.addEvent({\r\n        title: \"Attend the 2011 WWDC conference\",   \r\n        startDate: new Date(),  \r\n        endDate: endDate,   \r\n        location: \"San Francisco\",   \r\n        identifier: Ti.Calendar.identifier,\r\n        type:\"public\",\r\n        attendees: \"Steve, Phil\",\r\n        organizer: \"Chris Magnussen\",\r\n        note: \"Be mad about not getting the iPhone 5\",\r\n        recurrence: {\r\n\t         frequency: \"month\", // day, week, month, year\r\n\t         interval: 1,\r\n\t         end: recurringEnd\r\n        },\r\n        alarm: {\r\n        \toffset: -900 // 15 minutes before startDate\r\n        }\r\n    });\r\n\r\n## `calendarView.selectTodaysDate([void])`\r\nSelect todays date in the calendarView.     \r\nNothing more, nothing less..\r\n\r\n### Example\r\n\r\n>     var calendarView = Ti.Calendar.createView();\r\n>     var todayButton = Ti.UI.createButton({title: \"Today\"});\r\n\r\n>     todayButton.addEventListener(\"click\", function() {\r\n        calendarView.selectTodaysDate();\r\n    });\r\n\r\n>     window.setLeftNavButton(todayButton);\r\n\r\n## `calendarView.selectDate(ids[date])`\r\nProgramatically set active date.\r\n\r\n### Example\r\n\r\n>     var calendarView = Ti.Calendar.createView();\r\n>     var dateButton = Ti.UI.createButton({title: \"Set custom date\"});\r\n\r\n>     dateButton.addEventListener(\"click\", function() {\r\n        var newDate = new Date();\r\n\t\t// Add 3 days to current date\r\n\t\tnewDate.setDate(newDate.getDate()+3);\r\n\t\t\r\n>\t\t  calendarView.selectDate(newDate);\r\n\t});\r\n\r\n>     window.setLeftNavButton(dateButton);\r\n\r\nProperties\r\n--------\r\n## `Ti.Calendar.identifier (read-only)`\r\n\r\nThis can be used for the ***identifier***-parameter in the *createView()*-instance. \r\n\r\n### Returns\r\n* [string] MD5 sum of globallyUniqueString\r\n\r\nEvents\r\n-----\r\n## `event:clicked`\r\nWhen adding this to the calendar-view you will get all event-data in a single array whenever a user clicks the event-table.\r\n\r\n### Returns\r\n* [string] **title**\r\n* [string] **type** (*)\r\n* [string] **location**\r\n* [string] **attendees** (*)\r\n* [string] **description** (*)\r\n* [string] **identifier** (**)\r\n* [string] **organizer** (*)\r\n* [date] **startDate** (Standard dateTime format)\r\n* [date] **endDate** (Standard dateTime format)\r\n\r\n(\\*) Only available when using Core Data as the data source.   \r\n(\\**) When using Core Data your custom identifier is returned, else the auto generated eventIdentifier in EventKit is returned.\r\n\r\n### Example\r\n>     calendarView.addEventListener(\"event:clicked\", function(e) {\r\n        var event = e.event;\r\n        var start_date = new Date(event.startDate);\r\n        alert(event.title+\" will start \"+start_date);\r\n    });\r\n\r\n## `date:clicked`\r\nKnow which date/tile has been touched.\r\n\r\n### Returns\r\n* [date] **date** (Standard dateTime format)\r\n\r\n### Example\r\n>     calendarView.addEventListener(\"date:clicked\", function(e) {\r\n\t\tvar date_clicked = new Date(e.event.date);\r\n\t\tTi.API.info(\"Date clicked: \"+monthNames[date_clicked.getMonth()]+\" \"+date_clicked.getDate()\t+\".\");\r\n\t});\r\n\r\n## `month:next`\r\nFires whenever the month is changed\r\n\r\n### Returns\r\n* [date] **date** (Standard dateTime format) (*)\r\n\r\n(\\*) Coming in 1.2.6. Currently not returning anything, just fires the event.\r\n\r\n### Example\r\n>     calendarView.addEventListener(\"month:next\", function() {\r\n\t\tTi.API.info(\"Going to next month\");\r\n\t});\r\n\t\r\n## `month:previuos`\r\nFires whenever the month is changed\r\n\r\n### Returns\r\n* [date] **date** (Standard dateTime format) (*)\r\n\r\n(\\*) Coming in 1.2.6. Currently not returning anything, just fires the event.\r\n\r\n### Example\r\n>     calendarView.addEventListener(\"month:previous\", function() {\r\n\t\tTi.API.info(\"Going back to previous month\");\r\n\t});\r\n\r\n## Usage\r\n\r\nSee example.\r\n\r\n## Author\r\n\r\nChris Magnussen for Appgutta, DA.\r\n\r\n * [Twitter][]\r\n * [Appgutta.no][]\r\n\r\nLicense\r\n------\r\nCopyright(c) 2012 by Appgutta, DA. All Rights Reserved. Please see the LICENSE file included in the distribution for further details.\r\n\r\n\r\n[Twitter]: http://twitter.com/crmag\r\n[Appgutta.no]: http://www.appgutta.no\r\n","name":"AGCalendar"}